type: edu
custom_name: stage4
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n            new TestCase().setTimeLimit(30 * 60 * 1000)\n\
    \        );\n    }\n    \n    \n    private CheckResult checkPhrases(String reply,\
    \ String... phrases) {\n        reply = reply.toLowerCase();\n        for (String\
    \ phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.wrong(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.wrong(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.wrong(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.wrong(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.wrong(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.correct();\n    }\n}\n"
  learner_created: false
- name: src/phonebook/linearSearch.java
  visible: true
  text: |
    package phonebook;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.time.LocalTime;
    import java.time.temporal.ChronoUnit;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class linearSearch {
       public linearSearch(File whatLookFor, File whereLookFor) {
        }
        public static long[] searchLinear (File whatLookFor, File whereLookFor) throws FileNotFoundException {
            List<String> whatToFind = new ArrayList<>();
            List<String> whereToFind = new ArrayList<>();
            int countFound = 0;

            Scanner scannerWhat = new Scanner(whatLookFor);
            Scanner scannerWhere = new Scanner(whereLookFor);

            while (scannerWhat.hasNextLine()) {
                whatToFind.add(scannerWhat.nextLine());
            }

            while (scannerWhere.hasNextLine()) {
                whereToFind.add(scannerWhere.nextLine());
            }

            System.out.println("Start searching (linear search)...");
            LocalTime timeS = LocalTime.now();

            for (String s : whatToFind) {
                for (String s1 : whereToFind) {
                    if (s.equals(s1.split("\\d+ ")[1])) countFound++;
                }
            }

            LocalTime timeE = LocalTime.now();

            long spendMin = timeS.until(timeE, ChronoUnit.MINUTES);
            long spendSec = timeS.until(timeE, ChronoUnit.SECONDS) - spendMin*60;
            long spendMilliSec = timeS.until(timeE, ChronoUnit.MILLIS) - spendMin*60*1000 - spendSec*1000;

            System.out.println("Found " + countFound + "/" + whatToFind.size() + " entries. Time taken: " + spendMin + " min. " + spendSec + "sec. " + spendMilliSec + "ms.");
            return new long[]{spendMin, spendSec, spendMilliSec};
        }
    }
  learner_created: true
- name: src/phonebook/binarySearch.java
  visible: true
  text: |
    package phonebook;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.time.LocalTime;
    import java.time.temporal.ChronoUnit;
    import java.util.ArrayList;
    import java.util.Comparator;
    import java.util.List;
    import java.util.Scanner;

    public class binarySearch {


        public static void searchBinary (File whatLookFor, File whereLookFor) throws FileNotFoundException {
            Scanner scannerWhat = new Scanner(whatLookFor);
            Scanner scannerWhere = new Scanner(whereLookFor);
            int count = 0;

            List<String> whatToFind = new ArrayList<>();
            List<String> whereToFind = new ArrayList<>();

            while (scannerWhat.hasNextLine()) {
                whatToFind.add(scannerWhat.nextLine());
            }

            while (scannerWhere.hasNextLine()) {
                whereToFind.add(scannerWhere.nextLine());
            }

            System.out.println("Start searching (quick sort + binary search)...");

            LocalTime start = LocalTime.now();
            quickSort(whereToFind, 0, whereToFind.size() - 1);

            LocalTime endSort = LocalTime.now();
            for (String s : whatToFind) {
                if(searchBinary(whereToFind, s)) count++;
            }
            LocalTime endSearch = LocalTime.now();

            long minutes = start.until(endSort, ChronoUnit.MINUTES);
            long seconds = start.until(endSort, ChronoUnit.SECONDS) - minutes*60;
            long millsec = start.until(endSort, ChronoUnit.MILLIS) - minutes*60*1000 - seconds*1000;

            long minutesSearch = endSort.until(endSearch, ChronoUnit.MINUTES);
            long secondsSearch = endSort.until(endSearch, ChronoUnit.SECONDS) - minutesSearch*60;
            long millsecSearch = endSort.until(endSearch, ChronoUnit.MILLIS) - minutesSearch*60*1000 - secondsSearch*1000;

            long minutesFull = start.until(endSearch, ChronoUnit.MINUTES);
            long secondsFull = start.until(endSearch, ChronoUnit.SECONDS) - minutesFull*60;
            long millsecFull = start.until(endSearch, ChronoUnit.MILLIS) - minutesFull*60*1000 - secondsFull*1000;

            System.out.println("Found " + count + "/" + whatToFind.size() + " entries. Time taken: " + minutesFull + " min. " + secondsFull + " sec. " + millsecFull + " ms.");
            System.out.println("Sorting time: " + minutes + " min. " + seconds + " sec. " + millsec + " ms.");
            System.out.println("Searching time: " + minutesSearch + " min. " + secondsSearch + " sec. " + millsecSearch + " ms.");


        }
        public static boolean searchBinary (List<String> whereToFind, String whatToFind) {
            int left = 0;
            int right = whereToFind.size() - 1;

            while (left <= right) {
                int middle = left + (right - left)/2;
                if (whereToFind.get(middle).split("\\d+ ")[1].compareTo(whatToFind) == 0) {
                    return true;
                }
                if (whereToFind.get(middle).split("\\d+ ")[1].compareTo(whatToFind) > 0) {
                    right = middle - 1;
                } else left = middle + 1;
            }
            return false;
        }
        public static void quickSort (List<String> list, int begin, int end) {

            if (begin >= end) return;

            String pivot = list.get(end).split("\\d+ ")[1];

            int leftPointer = begin;
            int rightPointer = end;

            while (leftPointer < rightPointer) {

                while (list.get(leftPointer).split("\\d+ ")[1].compareTo(pivot) <= 0 && leftPointer < rightPointer) {
                    leftPointer++;
                }

                while (list.get(rightPointer).split("\\d+ ")[1].compareTo(pivot) >= 0 && leftPointer < rightPointer) {
                    rightPointer--;
                }
                swap(list, leftPointer, rightPointer);
            }

            swap(list, leftPointer, end);

            quickSort(list, begin, leftPointer - 1);
            quickSort(list, leftPointer + 1, end);
        }
        private static void swap (List<String> list, int index1, int index2) {
            String temp = list.get(index1);
            list.set(index1, list.get(index2));
            list.set(index2, temp);
        }
    }
  learner_created: true
- name: src/phonebook/jumpSearch.java
  visible: true
  text: |
    package phonebook;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.time.LocalTime;
    import java.time.temporal.ChronoUnit;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class jumpSearch {
        public jumpSearch(File whatLookFor, File whereLookFor) {
        }
        public static void searchJump(File whatLookFor, File whereLookFor, long[] timePast) throws FileNotFoundException {
            Scanner scannerWhat = new Scanner(whatLookFor);
            Scanner scannerWhere = new Scanner(whereLookFor);
            int count = 0;

            List<String> whatToFind = new ArrayList<>();
            List<String> whereToFind = new ArrayList<>();

            while (scannerWhat.hasNextLine()) {
                whatToFind.add(scannerWhat.nextLine());
            }

            while (scannerWhere.hasNextLine()) {
                whereToFind.add(scannerWhere.nextLine());
            }

            System.out.println("Start searching (bubble sort + jump search)...");

            LocalTime start = LocalTime.now();
            long[] sortTime = bubleSort(whereToFind, timePast);
            LocalTime searchS = LocalTime.now();
            if (sortTime[3] == 0) {
                for (String s : whatToFind) {
                    if (jumpS(whereToFind, s)) count++;
                }
            } else {
                for (String s : whatToFind) {
                    for (String s1 : whereToFind) {
                        if (s.equals(s1.split("\\d+ ")[1])) count++;
                    }
                }
            }
            LocalTime end = LocalTime.now();
            long spendMin = start.until(end, ChronoUnit.MINUTES);
            long spendSec = start.until(end, ChronoUnit.SECONDS) - spendMin*60;
            long spendMilliSec = start.until(end, ChronoUnit.MILLIS) - spendMin*60*1000 - spendSec*1000;

            long spendMinSearch = searchS.until(end, ChronoUnit.MINUTES);
            long spendSecSearch = searchS.until(end, ChronoUnit.SECONDS) - spendMinSearch*60;
            long spendMilliSecSearch = searchS.until(end, ChronoUnit.MILLIS) - spendMinSearch*60*1000 - spendSecSearch*1000;

            System.out.println("Found " + count + "/" + whatToFind.size() + " entries. Time taken: " + spendMin + " min. " + spendSec + " sec. " + spendMilliSec + " ms.");
            if (sortTime[3] == 0) {
                System.out.println("Sorting time: " + sortTime[0] + " min. " + sortTime[1] + " sec. " + sortTime[2] + " ms.");
            } else System.out.println("Sorting time: " + sortTime[0] + " min. " + sortTime[1] + " sec. " + sortTime[2] + " ms. - STOPPED, moved to linear search");
            System.out.println("Searching time: " + spendMinSearch + " min. " + spendSecSearch + " sec. " + spendMilliSecSearch + " ms.");
        }
        public static long[] bubleSort (List<String> list, long[] time) {
            long[] info = new long[4];
            LocalTime timeS = LocalTime.now();
            for (int i = 0; i < list.size(); i ++) {
                for (int j = 0; j < list.size(); j ++) {
                    if (i!=j && list.get(i).split("\\d+")[1].compareTo(list.get(j).split("\\d+")[1]) < 0) {
                        String temp = list.get(i);
                        list.set(i, list.get(j));
                        list.set(j, temp);
                    }
                }
                LocalTime check = LocalTime.now();
                long spendMin = timeS.until(check, ChronoUnit.MINUTES);
                long spendSec = timeS.until(check, ChronoUnit.SECONDS) - spendMin*60;
                long spendMilliSec = timeS.until(check, ChronoUnit.MILLIS) - spendMin*60*1000 - spendSec*1000;
                if (spendMin > time[0]*10 & spendSec > time[1] & spendMilliSec > time[2]) {
                    info[3] = 1;
                    break;
                } else info[3] = 0;
            }
             LocalTime timeE = LocalTime.now();
             info[0] = timeS.until(timeE, ChronoUnit.MINUTES);
             info[1] = timeS.until(timeE, ChronoUnit.SECONDS) - info[0]*60;
             info[2] = timeS.until(timeE, ChronoUnit.MILLIS) - info[0]*60*1000 - info[1]*1000;
             return info;
        }
        public static boolean jumpS (List<String> whereToFind, String whatToFind) {
            int n = whereToFind.size();
            int step = (int)Math.floor(Math.sqrt(n));
            int curr = 0;
            int prev = 0;
            while (whereToFind.get(curr).split("\\d+ ")[1].compareTo(whatToFind) < 0) {
                if (curr == n - 1) return false;
                prev = curr;
                curr = Math.min(curr + step, n - 1);
            }
            while (whereToFind.get(curr).split("\\d+ ")[1].compareTo(whatToFind) > 0) {
                curr--;
                if (curr <= prev) return false;
            }
            return whereToFind.get(curr).split("\\d+ ")[1].compareTo(whatToFind) == 0;
        }
    }
  learner_created: true
- name: src/phonebook/instantSearch.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7721#comment
status: Unchecked
record: -1
